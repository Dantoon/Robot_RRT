#!/bin/bash

my_pid=$$
echo "My process ID is $my_pid"

echo "Launching roscore..."
roscore &
pidCore=$!

for n in `seq 0 30`;
do
  echo "Launching Stage..."
  sleep 2s
  #roslaunch multirobot_stage multirobot_stage.launch world_file:=manyDots rviz_config:=robot_pedestrian_stage &
  roslaunch multirobot_stage multirobot_stage.launch world_file:=corridor_complex rviz_config:=corridor &
  pid="$pid $!"

  echo "Loading initialisation parameters..."
  rosparam load $(rospack find multirobot_stage)/scripts/initial_poses.yaml &

  echo "Launching map server..."
  #roslaunch nav_bundle map_server_stage.launch &
  roslaunch nav_bundle map_server_stage.launch map_name:=corridor_complex &
  pid="$pid $!"

  echo "Launching navigation stack..."
  sleep 2s
  for i in `seq 0 2`;
  do
    roslaunch nav_bundle single_navigation_stage.launch robot_name:=robot_$i x:="$(rosparam get /robot_$i/x)" y:="$(rosparam get /robot_$i/y)" yaw:="$(rosparam get /robot_$i/a)" &
    pid="$pid $!"
    sleep 2s
  done


  #my Nodes for rrt
  echo "Launching costmap..."
  roslaunch multirobot_stage robot_costmap.launch &
  pid="$pid $!"

  echo"running logger..."
  rosrun logger odom_log &
  pid="$pid $!"

  echo "running rrt_planning..."
  rosrun robot_rrt rrt_planning &
  pid="$pid $!"
  sleep 1s

  echo "running cmd_hold..."
  rosrun robot_rrt cmd_hold &
  pid="$pid $!"

  echo "setting map goal..."
  rostopic pub /map_goal geometry_msgs/Point -- 3 -20 0 &
  pid="$pid $!"


  echo "Launching pedestrian bounce controller..."
  roslaunch multirobot_stage bouncer.launch ns:=robot_1 &
  pid="$pid $!"

  echo "Launching pedestrian bounce controller..."
  roslaunch multirobot_stage bouncer.launch ns:=robot_2 &
  pid="$pid $!"
  
  sleep 80s
  kill -2 $pid
  mv odom_log.txt nForw$n.txt
  sleep 5s
done

trap "echo Killing all processes.; kill -2 TERM $pid; exit" SIGINT SIGTERM

sleep 24h

#to change use from cmd_hold or nor -> change subscriber in forward_projection.cpp and publisher in rrt_planning.h
